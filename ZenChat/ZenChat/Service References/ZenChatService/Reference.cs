//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.VisualStudio.ServiceReference.Platforms, version 14.0.23107.0
// 
namespace ZenChat.ZenChatService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/ZenChatService.ServiceClasses")]
    public partial class User : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string NameField;
        
        private string PhoneNumberField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhoneNumber {
            get {
                return this.PhoneNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneNumberField, value) != true)) {
                    this.PhoneNumberField = value;
                    this.RaisePropertyChanged("PhoneNumber");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PhoneNumberAlreadyExistsException", Namespace="http://schemas.datacontract.org/2004/07/ZenChatService.Exceptions")]
    public partial class PhoneNumberAlreadyExistsException : object, System.ComponentModel.INotifyPropertyChanged {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserNotFoundException", Namespace="http://schemas.datacontract.org/2004/07/ZenChatService.Exceptions")]
    public partial class UserNotFoundException : object, System.ComponentModel.INotifyPropertyChanged {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AlreadyFriendException", Namespace="http://schemas.datacontract.org/2004/07/ZenChatService.Exceptions")]
    public partial class AlreadyFriendException : object, System.ComponentModel.INotifyPropertyChanged {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChatRoom", Namespace="http://schemas.datacontract.org/2004/07/ZenChatService.ServiceClasses")]
    public partial class ChatRoom : object, System.ComponentModel.INotifyPropertyChanged {
        
        private ZenChat.ZenChatService.User AdminField;
        
        private bool CanWriteMessagesField;
        
        private System.DateTime CreatedField;
        
        private int IdField;
        
        private System.Collections.Generic.List<ZenChat.ZenChatService.User> MembersField;
        
        private System.Collections.Generic.List<ZenChat.ZenChatService.ChatMessage> MessagesField;
        
        private string TopicField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ZenChat.ZenChatService.User Admin {
            get {
                return this.AdminField;
            }
            set {
                if ((object.ReferenceEquals(this.AdminField, value) != true)) {
                    this.AdminField = value;
                    this.RaisePropertyChanged("Admin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool CanWriteMessages {
            get {
                return this.CanWriteMessagesField;
            }
            set {
                if ((this.CanWriteMessagesField.Equals(value) != true)) {
                    this.CanWriteMessagesField = value;
                    this.RaisePropertyChanged("CanWriteMessages");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Created {
            get {
                return this.CreatedField;
            }
            set {
                if ((this.CreatedField.Equals(value) != true)) {
                    this.CreatedField = value;
                    this.RaisePropertyChanged("Created");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<ZenChat.ZenChatService.User> Members {
            get {
                return this.MembersField;
            }
            set {
                if ((object.ReferenceEquals(this.MembersField, value) != true)) {
                    this.MembersField = value;
                    this.RaisePropertyChanged("Members");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<ZenChat.ZenChatService.ChatMessage> Messages {
            get {
                return this.MessagesField;
            }
            set {
                if ((object.ReferenceEquals(this.MessagesField, value) != true)) {
                    this.MessagesField = value;
                    this.RaisePropertyChanged("Messages");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Topic {
            get {
                return this.TopicField;
            }
            set {
                if ((object.ReferenceEquals(this.TopicField, value) != true)) {
                    this.TopicField = value;
                    this.RaisePropertyChanged("Topic");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChatMessage", Namespace="http://schemas.datacontract.org/2004/07/ZenChatService.ServiceClasses")]
    public partial class ChatMessage : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.Generic.List<ZenChat.ZenChatService.User> ArrivedAtField;
        
        private ZenChat.ZenChatService.User AuthorField;
        
        private System.DateTime CreatedField;
        
        private int IdField;
        
        private string MessageField;
        
        private System.Collections.Generic.List<ZenChat.ZenChatService.User> ReadByField;
        
        private System.Collections.Generic.List<ZenChat.ZenChatService.User> SentToField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<ZenChat.ZenChatService.User> ArrivedAt {
            get {
                return this.ArrivedAtField;
            }
            set {
                if ((object.ReferenceEquals(this.ArrivedAtField, value) != true)) {
                    this.ArrivedAtField = value;
                    this.RaisePropertyChanged("ArrivedAt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ZenChat.ZenChatService.User Author {
            get {
                return this.AuthorField;
            }
            set {
                if ((object.ReferenceEquals(this.AuthorField, value) != true)) {
                    this.AuthorField = value;
                    this.RaisePropertyChanged("Author");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Created {
            get {
                return this.CreatedField;
            }
            set {
                if ((this.CreatedField.Equals(value) != true)) {
                    this.CreatedField = value;
                    this.RaisePropertyChanged("Created");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<ZenChat.ZenChatService.User> ReadBy {
            get {
                return this.ReadByField;
            }
            set {
                if ((object.ReferenceEquals(this.ReadByField, value) != true)) {
                    this.ReadByField = value;
                    this.RaisePropertyChanged("ReadBy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<ZenChat.ZenChatService.User> SentTo {
            get {
                return this.SentToField;
            }
            set {
                if ((object.ReferenceEquals(this.SentToField, value) != true)) {
                    this.SentToField = value;
                    this.RaisePropertyChanged("SentTo");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChatNotFoundException", Namespace="http://schemas.datacontract.org/2004/07/ZenChatService.Exceptions")]
    public partial class ChatNotFoundException : object, System.ComponentModel.INotifyPropertyChanged {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MemberNotFoundException", Namespace="http://schemas.datacontract.org/2004/07/ZenChatService.Exceptions")]
    public partial class MemberNotFoundException : object, System.ComponentModel.INotifyPropertyChanged {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AlreadyMemberException", Namespace="http://schemas.datacontract.org/2004/07/ZenChatService.Exceptions")]
    public partial class AlreadyMemberException : object, System.ComponentModel.INotifyPropertyChanged {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NoPermissionException", Namespace="http://schemas.datacontract.org/2004/07/ZenChatService.Exceptions")]
    public partial class NoPermissionException : object, System.ComponentModel.INotifyPropertyChanged {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PrivateConversation", Namespace="http://schemas.datacontract.org/2004/07/ZenChatService.ServiceClasses")]
    public partial class PrivateConversation : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.Generic.List<ZenChat.ZenChatService.User> MembersField;
        
        private System.Collections.Generic.List<ZenChat.ZenChatService.ChatMessage> MessagesField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<ZenChat.ZenChatService.User> Members {
            get {
                return this.MembersField;
            }
            set {
                if ((object.ReferenceEquals(this.MembersField, value) != true)) {
                    this.MembersField = value;
                    this.RaisePropertyChanged("Members");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<ZenChat.ZenChatService.ChatMessage> Messages {
            get {
                return this.MessagesField;
            }
            set {
                if ((object.ReferenceEquals(this.MessagesField, value) != true)) {
                    this.MessagesField = value;
                    this.RaisePropertyChanged("Messages");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="https://zenchatservice.azurewebsites.net/ZenChat.svc", ConfigurationName="ZenChatService.Zen")]
    public interface Zen {
        
        [System.ServiceModel.OperationContractAttribute(Action="https://zenchatservice.azurewebsites.net/ZenChat.svc/Zen/ChangeUsername", ReplyAction="https://zenchatservice.azurewebsites.net/ZenChat.svc/Zen/ChangeUsernameResponse")]
        System.Threading.Tasks.Task<ZenChat.ZenChatService.User> ChangeUsernameAsync(int userId, string newUsername);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://zenchatservice.azurewebsites.net/ZenChat.svc/Zen/ChangePhoneNumber", ReplyAction="https://zenchatservice.azurewebsites.net/ZenChat.svc/Zen/ChangePhoneNumberRespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(ZenChat.ZenChatService.PhoneNumberAlreadyExistsException), Action="https://zenchatservice.azurewebsites.net/ZenChat.svc/Zen/ChangePhoneNumberPhoneNu" +
            "mberAlreadyExistsExceptionFault", Name="PhoneNumberAlreadyExistsException", Namespace="http://schemas.datacontract.org/2004/07/ZenChatService.Exceptions")]
        System.Threading.Tasks.Task<ZenChat.ZenChatService.User> ChangePhoneNumberAsync(int userId, string newPhoneNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://zenchatservice.azurewebsites.net/ZenChat.svc/Zen/GetUser", ReplyAction="https://zenchatservice.azurewebsites.net/ZenChat.svc/Zen/GetUserResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ZenChat.ZenChatService.UserNotFoundException), Action="https://zenchatservice.azurewebsites.net/ZenChat.svc/Zen/GetUserUserNotFoundExcep" +
            "tionFault", Name="UserNotFoundException", Namespace="http://schemas.datacontract.org/2004/07/ZenChatService.Exceptions")]
        System.Threading.Tasks.Task<ZenChat.ZenChatService.User> GetUserAsync(string phoneNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://zenchatservice.azurewebsites.net/ZenChat.svc/Zen/GetUserFromId", ReplyAction="https://zenchatservice.azurewebsites.net/ZenChat.svc/Zen/GetUserFromIdResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ZenChat.ZenChatService.UserNotFoundException), Action="https://zenchatservice.azurewebsites.net/ZenChat.svc/Zen/GetUserFromIdUserNotFoun" +
            "dExceptionFault", Name="UserNotFoundException", Namespace="http://schemas.datacontract.org/2004/07/ZenChatService.Exceptions")]
        System.Threading.Tasks.Task<ZenChat.ZenChatService.User> GetUserFromIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://zenchatservice.azurewebsites.net/ZenChat.svc/Zen/Login", ReplyAction="https://zenchatservice.azurewebsites.net/ZenChat.svc/Zen/LoginResponse")]
        System.Threading.Tasks.Task<System.Tuple<int, ZenChat.ZenChatService.User>> LoginAsync(string phone, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://zenchatservice.azurewebsites.net/ZenChat.svc/Zen/GetFriends", ReplyAction="https://zenchatservice.azurewebsites.net/ZenChat.svc/Zen/GetFriendsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ZenChat.ZenChatService.User>> GetFriendsAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://zenchatservice.azurewebsites.net/ZenChat.svc/Zen/AddFriend", ReplyAction="https://zenchatservice.azurewebsites.net/ZenChat.svc/Zen/AddFriendResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ZenChat.ZenChatService.UserNotFoundException), Action="https://zenchatservice.azurewebsites.net/ZenChat.svc/Zen/AddFriendUserNotFoundExc" +
            "eptionFault", Name="UserNotFoundException", Namespace="http://schemas.datacontract.org/2004/07/ZenChatService.Exceptions")]
        [System.ServiceModel.FaultContractAttribute(typeof(ZenChat.ZenChatService.AlreadyFriendException), Action="https://zenchatservice.azurewebsites.net/ZenChat.svc/Zen/AddFriendAlreadyFriendEx" +
            "ceptionFault", Name="AlreadyFriendException", Namespace="http://schemas.datacontract.org/2004/07/ZenChatService.Exceptions")]
        System.Threading.Tasks.Task AddFriendAsync(int userId, string otherPhone);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://zenchatservice.azurewebsites.net/ZenChat.svc/Zen/RemoveFriend", ReplyAction="https://zenchatservice.azurewebsites.net/ZenChat.svc/Zen/RemoveFriendResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ZenChat.ZenChatService.UserNotFoundException), Action="https://zenchatservice.azurewebsites.net/ZenChat.svc/Zen/RemoveFriendUserNotFound" +
            "ExceptionFault", Name="UserNotFoundException", Namespace="http://schemas.datacontract.org/2004/07/ZenChatService.Exceptions")]
        System.Threading.Tasks.Task RemoveFriendAsync(int userId, string otherPhone);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://zenchatservice.azurewebsites.net/ZenChat.svc/Zen/GetAllChatRooms", ReplyAction="https://zenchatservice.azurewebsites.net/ZenChat.svc/Zen/GetAllChatRoomsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ZenChat.ZenChatService.ChatRoom>> GetAllChatRoomsAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://zenchatservice.azurewebsites.net/ZenChat.svc/Zen/GetChatRoom", ReplyAction="https://zenchatservice.azurewebsites.net/ZenChat.svc/Zen/GetChatRoomResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ZenChat.ZenChatService.ChatNotFoundException), Action="https://zenchatservice.azurewebsites.net/ZenChat.svc/Zen/GetChatRoomChatNotFoundE" +
            "xceptionFault", Name="ChatNotFoundException", Namespace="http://schemas.datacontract.org/2004/07/ZenChatService.Exceptions")]
        [System.ServiceModel.FaultContractAttribute(typeof(ZenChat.ZenChatService.MemberNotFoundException), Action="https://zenchatservice.azurewebsites.net/ZenChat.svc/Zen/GetChatRoomMemberNotFoun" +
            "dExceptionFault", Name="MemberNotFoundException", Namespace="http://schemas.datacontract.org/2004/07/ZenChatService.Exceptions")]
        System.Threading.Tasks.Task<ZenChat.ZenChatService.ChatRoom> GetChatRoomAsync(int chatRoomId, int playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://zenchatservice.azurewebsites.net/ZenChat.svc/Zen/CreateChatRoom", ReplyAction="https://zenchatservice.azurewebsites.net/ZenChat.svc/Zen/CreateChatRoomResponse")]
        System.Threading.Tasks.Task<ZenChat.ZenChatService.ChatRoom> CreateChatRoomAsync(int userId, string topic);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://zenchatservice.azurewebsites.net/ZenChat.svc/Zen/InviteToChatRoom", ReplyAction="https://zenchatservice.azurewebsites.net/ZenChat.svc/Zen/InviteToChatRoomResponse" +
            "")]
        [System.ServiceModel.FaultContractAttribute(typeof(ZenChat.ZenChatService.AlreadyMemberException), Action="https://zenchatservice.azurewebsites.net/ZenChat.svc/Zen/InviteToChatRoomAlreadyM" +
            "emberExceptionFault", Name="AlreadyMemberException", Namespace="http://schemas.datacontract.org/2004/07/ZenChatService.Exceptions")]
        [System.ServiceModel.FaultContractAttribute(typeof(ZenChat.ZenChatService.NoPermissionException), Action="https://zenchatservice.azurewebsites.net/ZenChat.svc/Zen/InviteToChatRoomNoPermis" +
            "sionExceptionFault", Name="NoPermissionException", Namespace="http://schemas.datacontract.org/2004/07/ZenChatService.Exceptions")]
        System.Threading.Tasks.Task InviteToChatRoomAsync(int userId, string phoneNumber, int chatRoomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://zenchatservice.azurewebsites.net/ZenChat.svc/Zen/RemoveFromChatRoom", ReplyAction="https://zenchatservice.azurewebsites.net/ZenChat.svc/Zen/RemoveFromChatRoomRespon" +
            "se")]
        [System.ServiceModel.FaultContractAttribute(typeof(ZenChat.ZenChatService.MemberNotFoundException), Action="https://zenchatservice.azurewebsites.net/ZenChat.svc/Zen/RemoveFromChatRoomMember" +
            "NotFoundExceptionFault", Name="MemberNotFoundException", Namespace="http://schemas.datacontract.org/2004/07/ZenChatService.Exceptions")]
        [System.ServiceModel.FaultContractAttribute(typeof(ZenChat.ZenChatService.NoPermissionException), Action="https://zenchatservice.azurewebsites.net/ZenChat.svc/Zen/RemoveFromChatRoomNoPerm" +
            "issionExceptionFault", Name="NoPermissionException", Namespace="http://schemas.datacontract.org/2004/07/ZenChatService.Exceptions")]
        System.Threading.Tasks.Task RemoveFromChatRoomAsync(int userId, string phoneNumber, int chatRoomId);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://zenchatservice.azurewebsites.net/ZenChat.svc/Zen/WriteGroupChatMessage", ReplyAction="https://zenchatservice.azurewebsites.net/ZenChat.svc/Zen/WriteGroupChatMessageRes" +
            "ponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ZenChat.ZenChatService.ChatNotFoundException), Action="https://zenchatservice.azurewebsites.net/ZenChat.svc/Zen/WriteGroupChatMessageCha" +
            "tNotFoundExceptionFault", Name="ChatNotFoundException", Namespace="http://schemas.datacontract.org/2004/07/ZenChatService.Exceptions")]
        [System.ServiceModel.FaultContractAttribute(typeof(ZenChat.ZenChatService.NoPermissionException), Action="https://zenchatservice.azurewebsites.net/ZenChat.svc/Zen/WriteGroupChatMessageNoP" +
            "ermissionExceptionFault", Name="NoPermissionException", Namespace="http://schemas.datacontract.org/2004/07/ZenChatService.Exceptions")]
        System.Threading.Tasks.Task<ZenChat.ZenChatService.ChatRoom> WriteGroupChatMessageAsync(int userId, int chatRoomId, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://zenchatservice.azurewebsites.net/ZenChat.svc/Zen/GetPrivateConversation", ReplyAction="https://zenchatservice.azurewebsites.net/ZenChat.svc/Zen/GetPrivateConversationRe" +
            "sponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ZenChat.ZenChatService.UserNotFoundException), Action="https://zenchatservice.azurewebsites.net/ZenChat.svc/Zen/GetPrivateConversationUs" +
            "erNotFoundExceptionFault", Name="UserNotFoundException", Namespace="http://schemas.datacontract.org/2004/07/ZenChatService.Exceptions")]
        System.Threading.Tasks.Task<ZenChat.ZenChatService.PrivateConversation> GetPrivateConversationAsync(int userId, string otherPhone);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://zenchatservice.azurewebsites.net/ZenChat.svc/Zen/WritePrivateChatMessage", ReplyAction="https://zenchatservice.azurewebsites.net/ZenChat.svc/Zen/WritePrivateChatMessageR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ZenChat.ZenChatService.UserNotFoundException), Action="https://zenchatservice.azurewebsites.net/ZenChat.svc/Zen/WritePrivateChatMessageU" +
            "serNotFoundExceptionFault", Name="UserNotFoundException", Namespace="http://schemas.datacontract.org/2004/07/ZenChatService.Exceptions")]
        System.Threading.Tasks.Task<ZenChat.ZenChatService.PrivateConversation> WritePrivateChatMessageAsync(int userId, string otherPhone, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://zenchatservice.azurewebsites.net/ZenChat.svc/Zen/ReadChatMessage", ReplyAction="https://zenchatservice.azurewebsites.net/ZenChat.svc/Zen/ReadChatMessageResponse")]
        System.Threading.Tasks.Task ReadChatMessageAsync(int userId, int messageId);
        
        [System.ServiceModel.OperationContractAttribute(Action="https://zenchatservice.azurewebsites.net/ZenChat.svc/Zen/ReceiveChatMessage", ReplyAction="https://zenchatservice.azurewebsites.net/ZenChat.svc/Zen/ReceiveChatMessageRespon" +
            "se")]
        System.Threading.Tasks.Task ReceiveChatMessageAsync(int userId, int messageId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ZenChannel : ZenChat.ZenChatService.Zen, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ZenClient : System.ServiceModel.ClientBase<ZenChat.ZenChatService.Zen>, ZenChat.ZenChatService.Zen {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public ZenClient() : 
                base(ZenClient.GetDefaultBinding(), ZenClient.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_Zen.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ZenClient(EndpointConfiguration endpointConfiguration) : 
                base(ZenClient.GetBindingForEndpoint(endpointConfiguration), ZenClient.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ZenClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ZenClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ZenClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ZenClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ZenClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task<ZenChat.ZenChatService.User> ChangeUsernameAsync(int userId, string newUsername) {
            return base.Channel.ChangeUsernameAsync(userId, newUsername);
        }
        
        public System.Threading.Tasks.Task<ZenChat.ZenChatService.User> ChangePhoneNumberAsync(int userId, string newPhoneNumber) {
            return base.Channel.ChangePhoneNumberAsync(userId, newPhoneNumber);
        }
        
        public System.Threading.Tasks.Task<ZenChat.ZenChatService.User> GetUserAsync(string phoneNumber) {
            return base.Channel.GetUserAsync(phoneNumber);
        }
        
        public System.Threading.Tasks.Task<ZenChat.ZenChatService.User> GetUserFromIdAsync(int id) {
            return base.Channel.GetUserFromIdAsync(id);
        }
        
        public System.Threading.Tasks.Task<System.Tuple<int, ZenChat.ZenChatService.User>> LoginAsync(string phone, string name) {
            return base.Channel.LoginAsync(phone, name);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ZenChat.ZenChatService.User>> GetFriendsAsync(int userId) {
            return base.Channel.GetFriendsAsync(userId);
        }
        
        public System.Threading.Tasks.Task AddFriendAsync(int userId, string otherPhone) {
            return base.Channel.AddFriendAsync(userId, otherPhone);
        }
        
        public System.Threading.Tasks.Task RemoveFriendAsync(int userId, string otherPhone) {
            return base.Channel.RemoveFriendAsync(userId, otherPhone);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ZenChat.ZenChatService.ChatRoom>> GetAllChatRoomsAsync(int userId) {
            return base.Channel.GetAllChatRoomsAsync(userId);
        }
        
        public System.Threading.Tasks.Task<ZenChat.ZenChatService.ChatRoom> GetChatRoomAsync(int chatRoomId, int playerId) {
            return base.Channel.GetChatRoomAsync(chatRoomId, playerId);
        }
        
        public System.Threading.Tasks.Task<ZenChat.ZenChatService.ChatRoom> CreateChatRoomAsync(int userId, string topic) {
            return base.Channel.CreateChatRoomAsync(userId, topic);
        }
        
        public System.Threading.Tasks.Task InviteToChatRoomAsync(int userId, string phoneNumber, int chatRoomId) {
            return base.Channel.InviteToChatRoomAsync(userId, phoneNumber, chatRoomId);
        }
        
        public System.Threading.Tasks.Task RemoveFromChatRoomAsync(int userId, string phoneNumber, int chatRoomId) {
            return base.Channel.RemoveFromChatRoomAsync(userId, phoneNumber, chatRoomId);
        }
        
        public System.Threading.Tasks.Task<ZenChat.ZenChatService.ChatRoom> WriteGroupChatMessageAsync(int userId, int chatRoomId, string message) {
            return base.Channel.WriteGroupChatMessageAsync(userId, chatRoomId, message);
        }
        
        public System.Threading.Tasks.Task<ZenChat.ZenChatService.PrivateConversation> GetPrivateConversationAsync(int userId, string otherPhone) {
            return base.Channel.GetPrivateConversationAsync(userId, otherPhone);
        }
        
        public System.Threading.Tasks.Task<ZenChat.ZenChatService.PrivateConversation> WritePrivateChatMessageAsync(int userId, string otherPhone, string message) {
            return base.Channel.WritePrivateChatMessageAsync(userId, otherPhone, message);
        }
        
        public System.Threading.Tasks.Task ReadChatMessageAsync(int userId, int messageId) {
            return base.Channel.ReadChatMessageAsync(userId, messageId);
        }
        
        public System.Threading.Tasks.Task ReceiveChatMessageAsync(int userId, int messageId) {
            return base.Channel.ReceiveChatMessageAsync(userId, messageId);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_Zen)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_Zen)) {
                return new System.ServiceModel.EndpointAddress("http://zenchatservice.azurewebsites.net/ZenChat.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return ZenClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_Zen);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return ZenClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_Zen);
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_Zen,
        }
    }
}
